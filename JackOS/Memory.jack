// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 

/** 
    Heap memory segment is from 2048 to 16383, and its length is 14336.
    We use the heap memory segment model like bellow.
    Memory segment structure is like this:
    | <-            Free Segment          -> | ... | <-    Data Segment    -> | ... | <-            Free Segment          -> | ...
    | Address | Size | vacant | ... | vacant | ... | Size | Data | ... | Data | ... | Address | Size | vacant | ... | vacant | ...
                       <- vacant section  ->               <- data section ->                          <- vacant section  ->

    Free Segment: vacant memory segment for new objects and arrays.
    - Address: Address pointing to head of next free segment.
        If the segment is the end of all free segments, address points to the head of the segment itself.
    - Size: Available allocation size from this segment, which is equal to length of the vacant section.
    Data Segment: Allocated memory segment for existing objects and arrays.
    - Size: Allocated size by this segment, which is equal to length of the data section.
      This value is used for deallocating data segments and executing deflagmentation.
    - Data: Actual value for existing objects and arrays.

    When memory is allocated, target free segment is choosed which has available and minimum size.
      New data segment is created at the end of the vacant section in this free segment.
      Returned address points to the head of the data section in the created data segment.
    When memory is deallocated, corresponding data segment is replaced by newly created free segment.
      Size of this free segment is equal to `data segment size - 1`.
    After deallocating the data segment, flagmentation reduction is executed if possible.
      In this process, adjacent free segments are merged into a single segment.

    Initialization:
      When Memory.init method is called, a free segment equal to the entire heap memory is generated.

*/

// TODO メモリ管理のデバッグテストやる
class Memory {
    static Array ram;
    static int HEAPBASE;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let HEAPBASE = 2048; // heapBase
        let ram[HEAPBASE] = HEAPBASE;        // next
        let ram[HEAPBASE + 1] = 14334;    // free length. 16384 - 2048 - 2
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int segment;
        // find segment
        let segment = Memory.find_best_fit_segment(size);
        // allocate from the found segment
        return Memory.allocFromSegment(segment, size);
    }

    function int find_best_fit_segment(int size) {
        var int segment, targetSegment, targetSegmentSizeDiff, segmentSizeDiff;
        let segment = HEAPBASE;
        let targetSegment = HEAPBASE;
        let targetSegmentSizeDiff = 32767;
        // `ram[segment] = segment` means that this segment is last memory segment
        while(~(ram[segment] = segment)) {
            let segmentSizeDiff = ram[segment + 1] - size;
            if ((segmentSizeDiff > 0) & (segmentSizeDiff < targetSegmentSizeDiff)) {
                let targetSegment = segment;
                let targetSegmentSizeDiff = segmentSizeDiff;
            }
            let segment = ram[segment];
        }
        return targetSegment;
    }

    function int allocFromSegment(int segment, int allocSize) {
        var int segmentLength, allocAddr;
        let segmentLength = ram[segment + 1];
        let allocAddr = segment + segmentLength - allocSize + 2;
        let ram[allocAddr - 1] = allocSize; // mark allocated size on ram memory
        let ram[segment + 1] = segmentLength - allocSize - 1; // update free length of segment
        return allocAddr;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int size, segmentBefore, newSegment, newNextSegment;
        let newSegment = o - 1;
        let size = ram[newSegment];
        // find before segment
        let segmentBefore = Memory.findSegmentBeforeDeAllocked(o);
        if (segmentBefore = ram[segmentBefore]) {
            // new segment is last segment
            let newNextSegment = newSegment;
        } else {
            // new segment is not last segment
            let newNextSegment = ram[segmentBefore];
        }
        // insert new segment
        let ram[newSegment] = newNextSegment;
        let ram[o] = size - 1;

        // update before segment
        let ram[segmentBefore] = newSegment;

        do Memory.deflag();

        return;
    }

    function int findSegmentBeforeDeAllocked(Array o) {
        var int segment, result;
        let segment = HEAPBASE;
        let result = HEAPBASE;
        while(~(segment = ram[segment])) {
            if (segment < o) {
                let result = segment;
            }
            let segment = ram[segment];
        }
        return result;
    }

    function void deflag() {
        while (Memory.mergeAdjacentMemorySegments()){}
        return;
    }

    // Merge adjacent two free memory segments into single free memory segment.
    // Return true if two memory segments could be merged.
    function bool mergeAdjacentMemorySegments() {
        var int segment;
        let segment = HEAPBASE;
        while(~(segment = ram[segment])) {
            // condition of having adjecent next segment
            if (ram[segment] = (segment + ram[segment + 1] + 2)) {
                // Calculate free-length of merged memory segment.
                let ram[segment + 1] = ram[segment + 1] + 2 + ram[ram[segment] + 1];
                // Calculate and set address to next memory segment of the merged memory segment.
                if (ram[segment] = ram[ram[segment]]){
                    // If the second segment to be merged is the last segment in heap,
                    // the merged segment should also be the last segment in heap.
                    let ram[segment] = segment;
                } else {
                    let ram[segment] = ram[ram[segment]];
                }
                return true;
            }
            let segment = ram[segment];
        }
        return false;
    }
}
